localhost {
	respond "Hello, local world!"
}

dl-imetrical.spdns.org {
	respond "Hello, spdyn world!"
}

syno-im.synology.me {
	respond "Hello, synology world!"
}

dl.imetrical.com {
	respond "Hello, iMetrical world!"
}

audiobook.dl.imetrical.com {
	# This VM is running on hilbert
	# reverse_proxy 192.168.86.34:32400
	reverse_proxy plex-audiobook.imetrical.com:32400
}

# Make nats over websockets available at wss://nats.dl.imetrical.com
# The request matcher was not required previously, but it is now required
nats.dl.imetrical.com {
	@websockets {
		header Connection *Upgrade*
		header Upgrade websocket
	}
	# reverse_proxy @websockets nats.ts.imetrical.com:9222
	# also available at nats:9222 because we are in the same compose file (network)
	reverse_proxy @websockets nats:9222
}

status.dl.imetrical.com {
	# reverse_proxy gateway.ts.imetrical.com:8001
	# also available at status:8001 because we are in the same compose file (network)
	reverse_proxy status:8001
}

natsql.dl.imetrical.com {
	# reverse_proxy gateway.ts.imetrical.com:5000
	# also available at natsql:5000 because we are in the same compose file (network)
	reverse_proxy natsql:5000
}

# because deployed with different docker-compose (not visible)
scrobblecast.dl.imetrical.com {
	reverse_proxy dirac.ts.imetrical.com:8000
}

# DNS-challenge: https://caddyserver.com/docs/automatic-https#dns-challenge
# Wildcard https://caddyserver.com/docs/caddyfile/patterns#wildcard-certificates

gateway.imetrical.net {
	tls {
		dns route53 {
			max_retries 10
		}
	}
	respond "Hello, gateway.imetrical.net! (DNS Challenge - route53)"
}

gateway.ts.imetrical.net {
	tls {
		dns route53 {
			max_retries 10
		}
	}
	respond "Hello, gateway.ts.imetrical.net! (DNS Challenge - route53)"
}
